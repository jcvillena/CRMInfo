@using CRMInfo.Data
@inject EspecialService EspecialService

<DxDataGrid Data="@listaEspeciales">

    <Columns>
        <DxDataGridColumn Field=@nameof(Especial.Oferta) Width="80px" Caption="#">
            <DisplayTemplate>
                @{
                    var keyField = (context as Especial).Oferta;
                    <a class="btn btn-outline-success" id="ver" @onclick="@(() => { OnClick(keyField); })"><span class="oi oi-eye"></span></a>
                }
            </DisplayTemplate>
        </DxDataGridColumn>>
        <DxDataGridColumn Field="@nameof(Especial.Oferta)" TextAlignment="DataGridTextAlign.Left" />
        <DxDataGridDateEditColumn Field="@nameof(Especial.Fecha)" DisplayFormat="dd/MM/yy" EditorFormat="d" EditorDisplayFormat="D" />
        <DxDataGridDateEditColumn Field="@nameof(Especial.FechaEnvio)" DisplayFormat="dd/MM/yy hh:mm" EditorFormat="d" EditorDisplayFormat="D" />
        <DxDataGridColumn Field="@nameof(Especial.SuPedido)" />
        <DxDataGridColumn Field="@nameof(Especial.CreadoPor)" />

        <DxDataGridColumn Field="@nameof(Especial.Estado)">
            <DisplayTemplate>
                @{

                    var estado = (context as Especial).Codigo;
                    @switch (estado)
                    {
                        case "0":
                            <span class="badge badge-info even-larger-badge">Inicial</span>
                            break;

                        case "1":
                            <span class="badge badge-primary even-larger-badge">Pendiente presupuestar</span>
                            break;
                        case "2":
                            <span class="badge badge-secondary even-larger-badge">Presupuestado</span>
                            break;
                        case "3":
                            <span class="badge badge-danger even-larger-badge">No viable</span>
                            break;
                        case "4":
                            <span class="badge badge-danger even-larger-badge">Comunicado no viable</span>
                            break;
                        case "5":
                            <span class="badge badge-secondary even-larger-badge">Faltan datos</span>
                            break;
                        case "6":
                            <span class="badge badge-danger even-larger-badge">Cancelada</span>
                            break;
                        case "7":
                            <span class="badge badge-warning even-larger-badge">Enviado cliente</span>
                            break;
                        case "8":
                            <span class="badge badge-danger even-larger-badge">Rechazada</span>
                            break;
                        case "9":
                            <span class="badge badge-secondary even-larger-badge">Caducada</span>
                            break;
                        case "10":
                            <span class="badge badge-success even-larger-badge">Aceptada cliente</span>
                            break;
                        case "11":
                            <span class="badge badge-success even-larger-badge">Informatizar</span>
                            break;
                        case "12":
                            <span class="badge badge-success even-larger-badge">Pend.Aprobación planos</span>
                            break;
                        case "13":
                            <span class="badge badge-success even-larger-badge">Finalizada</span>
                            break;

                    }

                }
            </DisplayTemplate>

        </DxDataGridColumn>
        <DxDataGridSpinEditColumn Field="@nameof(Especial.Total)" DisplayFormat="c" />
    </Columns>
</DxDataGrid>
<DxPopup HeaderText="Detalle Oferta" Visible="@popupVisible">
    <div>Detalle de la oferta</div>



</DxPopup>

@code {

    [Parameter]
    public int Cliente { get; set; }

    List<Especial> listaEspeciales;
    bool popupVisible = false;

    protected override async Task OnInitializedAsync()
    {

        listaEspeciales = await EspecialService.GetEspeciales(Cliente);
    }
    void OnClick(object id)
    {
  
        // Mostrar el popup cargando los datos
        popupVisible = true;

    }
}
